data class Hero(
    val name: String,
    val age: Int,
    val gender: Gender?
)
enum class Gender {MALE, FEMALE }

fun main(args: Array<String>) {
    val heroes = listOf(
    Hero("The Captain", 60, MALE),
    Hero("Frenchy", 42, MALE), 
    Hero("The Kid", 9, null), 
    Hero("Lady Lauren", 29, FEMALE), 
    Hero("First Mate", 29, MALE), 
    Hero("Sir Stephen", 37, MALE))

	  //check for the first, last, firstOrNull, lastOrNull operations.
    heroes.last().name    //-- Sir Stephen
    heroes.first().name   //-- The Captain
    heroes.firstOrNull{it.age == 30}?.name  //-- null [No age == 30]
    heroes.first{it.age == 30}.name         // NoSuchElementException
    // map. distinct
    heroes.map{it.age}        // 60,42,9,29,29,37
    heroes.map{it.age}.distinct()        // 60,42,9,29,37
    heroes.map{it.age}.distinct().size        // 5
    // Filter
    heroes.filter{it.age<30}.size        // 3
    // partition
    val(youngest, oldest) = heroes.partition{it.age < 30}
    oldest.size               // 3
    //maxBy, minBy
    // compare by property or other parameters
    heroes.maxBy{it.age}?.name    // The Captain
    heroes.minBy{it.age}?.name    // The Kid
    
    // all, any
    heroes.all{it.age < 50}       // false (not all age is < 50)
    heroes.any{it.gender == MALE}   // true
    
    // Mapping by property
    val mapByAge: Map<Int, List<Hero>> = heroes.groupBy { it.age }
    // Create another list based on mapping criteria.
    // new list based on age. 1 entry based on 60, 42, 9, 37. Another group with 2 entries for age 29.
    val (age, group) = mapByAge.maxBy { (_, group) -> group.size}!!
    // maxBy got the age=29 entry, having 2 entries
    println(age)    // 29
    
    // Associativity
    val mapByName: Map<String, Hero> = heroes.associateBy { it.name }
    mapByName["Frenchy"]?.age		// 42

    // Complex code. try to simplify and prevent usage of "it" with multiple instances. Use explicit parameters.
    val (first, second) = heroes.flatMap { heroes.map { hero -> it to hero } }.maxBy { it.first.age - it.second.age }!!
    first.name       // The Captain
    //Understand the question:
    Simplify the command
    1.	val (first, second) = heroes.flatMap { heroes.map { hero -> it to hero } }.maxBy { it.first.age - it.second.age }!!
    2.	Simplify the “it” with explicit parameters as
        val (first, second) = heroes.flatMap { first -> heroes.map { hero -> first to hero } }.maxBy { it.first.age - it.second.age }!!
    3.	Simplify the “hero” as second 
	val (first, second) = heroes.flatMap { first -> heroes.map { second -> first to second } }.maxBy { it.first.age - it.second.age }!!
    4.	Simplify the code into multiple statements.
	Val allPossiblePairs = heroes.flatMap { first -> heroes.map { second -> first to second }}
	Val (first, second) = allPossiblePairs.maxBy{it.first.age – it.second.age}
    5.	Finally, it is asking for the oldest (first) and youngest person (Second) with max difference.
	
    // This code can be simply written as:
	Val oldest = heroes.maxBy{it.age}
	Oldest.name 		// The Captain


    
}
