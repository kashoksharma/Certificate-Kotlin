Without modifying the class 'A' complete the code in 'main' so that an exception UninitializedPropertyAccessException was thrown. 
Then fix the newly added code in 'main' so that no exception was thrown.
class A {
    private lateinit var prop: String

    fun setUp() {
        prop = "value"
    }

    fun display() {
        println(prop)
    }
}

fun main(args: Array<String>) {
    val a = A()
    
}

[Solution] Step !: UninitializedPropertyAccessException exception thrown.
fun main(args: Array<String>) {
    val a = A()
    //a.setUp()
    a.display()
}
[Output]
Exception in thread "main" kotlin.UninitializedPropertyAccessException: lateinit property prop has not been initialized
 at A.display (File.kt:9) 
 at FileKt.main (File.kt:16) 
 at sun.reflect.NativeMethodAccessorImpl.invoke0 (NativeMethodAccessorImpl.java:-2) 
 
 [Final Solution] Fix the exception.
 fun main(args: Array<String>) {
    val a = A()
    a.setUp()
    a.display()
}
